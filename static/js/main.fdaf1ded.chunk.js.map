{"version":3,"sources":["utils/routing.js","routing/index.jsx","domain/home/index.jsx","domain/work/index.jsx","contexts/index.jsx","App.jsx","utils/serviceWorker.js","index.js"],"names":["createRoute","path","component","navLink","exact","createNavLink","to","text","activeClassName","routes","className","ContentRoutes","map","key","NavLinks","route","index","AppContextProvider","props","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAGaA,EAAc,SAACC,EAAMC,GAAP,IAAkBC,EAAlB,uDAA4B,KAAMC,IAAlC,+DAAoD,CAC7EH,OACAC,YACAC,UACAC,UAGWC,EAAgB,SAACC,EAAIC,GAAL,OAC3B,kBAAC,IAAD,CAASD,GAAIA,EAAIF,OAAK,EAACI,gBAAgB,mBACpCD,ICPCE,EAAS,CCecT,EAC3B,CAAC,IAAK,UAlBgB,WACtB,OACE,yBAAKU,UAAU,aACb,0EACA,kEAEA,wFAEA,qEACA,uIAWJL,EAAc,IAAK,SCXQL,EAC3B,SAVsB,WACtB,OACE,yBAAKU,UAAU,aAAf,aAEE,qEAQJL,EAAc,QAAS,UFRZM,EAAgB,WAC3B,OACE,kBAAC,IAAD,KACGF,EAAOG,KAAI,gBAAGX,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWE,EAApB,EAAoBA,MAApB,OACV,kBAAC,IAAD,CAAOS,IAAKZ,EAAMA,KAAMA,EAAMG,MAAOA,EAAOF,UAAWA,SAMlDY,EAAWL,EAAOG,KAAI,SAACG,EAAOC,GACzC,OAAKD,EAAMZ,QAGT,yBAAKU,IAAKG,EAAON,UAAU,YACxBK,EAAMZ,SAJgB,QGRdc,EANY,SAACC,GAAW,IAC7BC,EAAaD,EAAbC,SAER,OAAO,kBAAC,IAAD,KAASA,ICcHC,MAhBf,WACE,OACE,kBAAC,EAAD,KACE,yBAAKV,UAAU,OACb,6BACE,mCACCI,EAASF,KAAI,SAACT,GAAD,OAAaA,MAE7B,8BACE,kBAAC,EAAD,UCFUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fdaf1ded.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const createRoute = (path, component, navLink = null, exact = true) => ({\r\n  path,\r\n  component,\r\n  navLink,\r\n  exact,\r\n});\r\n\r\nexport const createNavLink = (to, text) => (\r\n  <NavLink to={to} exact activeClassName=\"nav-link-active\">\r\n    {text}\r\n  </NavLink>\r\n);\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { HomePageRoute } from \"../domain/home\";\r\nimport { WorkPageRoute } from \"../domain/work\";\r\n\r\nconst routes = [HomePageRoute, WorkPageRoute];\r\n\r\nexport const ContentRoutes = () => {\r\n  return (\r\n    <Switch>\r\n      {routes.map(({ path, component, exact }) => (\r\n        <Route key={path} path={path} exact={exact} component={component} />\r\n      ))}\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport const NavLinks = routes.map((route, index) => {\r\n  if (!route.navLink) return null;\r\n\r\n  return (\r\n    <div key={index} className=\"nav-link\">\r\n      {route.navLink}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { createNavLink, createRoute } from \"../../utils/routing\";\r\n\r\nexport const HomePage = () => {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <p>This is going to be Max's public portfolio!</p>\r\n      <p>He has a lot to set up first though</p>\r\n\r\n      <p>First I am going to start with the initial app structure.</p>\r\n\r\n      <p>hmmm, need to get a css reset probably</p>\r\n      <p>\r\n        I am working on pushing this to github pages now! Trying another\r\n        change.. hmm maybe this... nah this!\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const HomePageRoute = createRoute(\r\n  [\"/\", \"/home\"],\r\n  HomePage,\r\n  createNavLink(\"/\", \"Home\")\r\n);\r\n","import React from \"react\";\r\nimport { createNavLink, createRoute } from \"../../utils/routing\";\r\n\r\nexport const WorkPage = () => {\r\n  return (\r\n    <div className=\"work-page\">\r\n      Work Page!\r\n      <p>I have worked at a few cool places!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WorkPageRoute = createRoute(\r\n  \"/work\",\r\n  WorkPage,\r\n  createNavLink(\"/work\", \"Work\")\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nconst AppContextProvider = (props) => {\r\n  const { children } = props;\r\n\r\n  return <Router>{children}</Router>;\r\n};\r\n\r\nexport default AppContextProvider;\r\n","import React from \"react\";\r\nimport { ContentRoutes } from \"./routing\";\r\nimport AppContextProvider from \"./contexts\";\r\nimport { NavLinks } from \"./routing\";\r\n\r\nfunction App() {\r\n  return (\r\n    <AppContextProvider>\r\n      <div className=\"App\">\r\n        <nav>\r\n          <p>Nav!</p>\r\n          {NavLinks.map((navLink) => navLink)}\r\n        </nav>\r\n        <main>\r\n          <ContentRoutes />\r\n        </main>\r\n      </div>\r\n    </AppContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './utils/serviceWorker';\r\nimport \"./styles/index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}